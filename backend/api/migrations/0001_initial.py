# Generated by Django 5.1.4 on 2025-01-14 11:26

import django.contrib.auth.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('eid', models.IntegerField(db_column='EID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=255)),
                ('position', models.CharField(db_column='Position', max_length=255)),
            ],
            options={
                'db_table': 'employee',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Expenses',
            fields=[
                ('expenseid', models.IntegerField(db_column='ExpenseID', primary_key=True, serialize=False)),
                ('date', models.DateField(db_column='Date')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=10)),
                ('description', models.TextField(db_column='Description')),
            ],
            options={
                'db_table': 'expenses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('itemid', models.IntegerField(db_column='ItemID', primary_key=True, serialize=False)),
                ('itemname', models.CharField(db_column='ItemName', max_length=255)),
                ('itemquantity', models.IntegerField(db_column='ItemQuantity')),
                ('minimumstocklevel', models.IntegerField(db_column='MinimumStockLevel')),
            ],
            options={
                'db_table': 'inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventoryexpense',
            fields=[
                ('inventoryexpenseid', models.IntegerField(db_column='inventoryExpenseID', primary_key=True, serialize=False)),
                ('date', models.DateField(db_column='Date')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
            ],
            options={
                'db_table': 'inventoryexpense',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventoryissuelog',
            fields=[
                ('logid', models.IntegerField(db_column='LogID', primary_key=True, serialize=False)),
                ('itemquantity', models.IntegerField(db_column='ItemQuantity')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
            ],
            options={
                'db_table': 'inventoryissuelog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('invoiceid', models.IntegerField(db_column='InvoiceID', primary_key=True, serialize=False)),
                ('percentage', models.DecimalField(db_column='Percentage', decimal_places=2, max_digits=5)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'invoice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('pono', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('sitename', models.CharField(db_column='SiteName', max_length=255)),
                ('poamount', models.DecimalField(db_column='POAmount', decimal_places=2, max_digits=10)),
                ('invoicestatus', models.CharField(db_column='InvoiceStatus', max_length=50)),
                ('deadline', models.DateField(db_column='Deadline')),
            ],
            options={
                'db_table': 'site',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SiteExpenses',
            fields=[
                ('site_expenseid', models.IntegerField(db_column='site_ExpenseID', primary_key=True, serialize=False)),
                ('date', models.DateField(db_column='Date')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=10)),
                ('description', models.TextField(db_column='Description')),
            ],
            options={
                'db_table': 'site_expenses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SiteProgressupdate',
            fields=[
                ('progressid', models.IntegerField(db_column='ProgressID', primary_key=True, serialize=False)),
                ('date', models.DateField(db_column='Date')),
                ('progressstatus', models.CharField(db_column='ProgressStatus', max_length=50)),
            ],
            options={
                'db_table': 'site_progressupdate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userid', models.AutoField(db_column='UserID', primary_key=True, serialize=False)),
                ('username', models.CharField(db_column='UserName', max_length=255, unique=True)),
                ('password', models.CharField(db_column='Password', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
